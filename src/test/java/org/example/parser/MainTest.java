package org.example.parser;

import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
import org.example.Main;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class MainTest {
    Config config = ConfigFactory.load();

    @Test
    public void test() throws IOException {
        Main.main(new String[0]);
        Path outputPath = Paths.get(config.getString("app.data.output"));
        Stream<Path> csvFilePath = Files.list((outputPath))
                .filter(p -> p.getFileName().toString().startsWith("part-") && p.toString().endsWith((".csv")));

        List<String> lines = csvFilePath.flatMap(
                outputPathCsv -> {
                    Stream csvFileContents = Stream.empty();
                    try {
                        csvFileContents = Files.lines(outputPathCsv);
                    } catch (IOException e) {
                        log.warn("error");
                    }
                    return  csvFileContents;
                }
        ).collect(Collectors.toList());

        //List<String> lines = Files.readAllLines(Paths.get(outputPath));
        assertThat(lines)
                .isNotEmpty()
                .hasSize(56669);
    }
}
