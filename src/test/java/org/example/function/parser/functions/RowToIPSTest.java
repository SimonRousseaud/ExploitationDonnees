package org.example.function.parser.functions;

import org.apache.spark.sql.Row;
import org.apache.spark.sql.catalyst.expressions.GenericRowWithSchema;
import org.apache.spark.sql.types.DataTypes;
import org.apache.spark.sql.types.Metadata;
import org.apache.spark.sql.types.StructField;
import org.apache.spark.sql.types.StructType;
import org.example.function.parser.beans.IPS;
import org.example.function.parser.functions.parser.RowToIPS;
import org.junit.Test;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;

public class RowToIPSTest {

    @Test
    public void shouldReadFile() throws IOException {

        RowToIPS f = new RowToIPS();


        StructType sheama = new StructType(
                new StructField[]{
                        new StructField(
                                "rentree_scolaire",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "academie",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "code_du_departement",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "departement",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "uai",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "nom_de_l_etablissment",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "code_insee_de_la_commune",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "nom_de_la_commune",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "secteur",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),
                        new StructField(
                                "ips",
                                DataTypes.StringType,
                                true,
                                Metadata.empty()
                        ),

                }
        );


        String[] values = {"2021-2022","CRETEIL","93","SEINE-SAINT-DENIS","0931318C","ECOLE ELEMENTAIRE HONORE DE BALZAC","93073","TREMBLAY EN FRANCE","public","103.1"};
        Row row = new GenericRowWithSchema(values , sheama);
        IPS actual = f.apply(row);

        IPS expected = IPS.builder()
                .Date("2021-2022")
                .Academy("CRETEIL")
                .CodeDep("93")
                .Dep("SEINE-SAINT-DENIS")
                .Uai("0931318C")
                .SchoolName("ECOLE ELEMENTAIRE HONORE DE BALZAC")
                .InseeCode("93073")
                .Town("TREMBLAY EN FRANCE")
                .Sector("public")
                .Ips("103.1")
                .build();


        assertThat(actual).isEqualTo(expected);


    }
}
