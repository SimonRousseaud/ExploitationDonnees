package ca.aretex.irex.explor.data.naissances.functions.receiver;

import ca.aretex.irex.explor.data.naissances.beans.ActeNaissances;
import ca.aretex.irex.explor.data.naissances.functions.parser.TextToActeNaissancesFunc;
import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.kafka010.ConsumerStrategies;
import org.apache.spark.streaming.kafka010.KafkaUtils;
import org.apache.spark.streaming.kafka010.LocationStrategies;
import org.codehaus.jackson.map.deser.std.StringDeserializer;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@RequiredArgsConstructor
public class ActeNaissancesKafkaReceiver {
    private final List<String> topics;
    private final JavaStreamingContext jsc;
    private TextToActeNaissancesFunc tta = new TextToActeNaissancesFunc();

    private Function<String, ActeNaissances> mapper = tta::apply;

    private final Config config = ConfigFactory.load("application.conf");
    private final Map<String, Object> kafkaParams = new HashMap<String, Object>() {{
        put("bootstrap.servers", config.getString("app.kafka.host"));
        put("key.deserializer", config.getString("app.kafka.keyD"));
        put("value.deserializer", config.getString("app.kafka.valueD"));
        put("group.id", config.getString("app.kafka.id"));
        put("auto.offset.reset", config.getString("app.kafka.reset"));
    }};

    public JavaDStream<ActeNaissances> get() {
        JavaInputDStream<ConsumerRecord<String,String>> directStream = KafkaUtils.createDirectStream(
                jsc,
                LocationStrategies.PreferConsistent(),
                ConsumerStrategies.Subscribe(topics,kafkaParams)
        );
        return directStream.map(ConsumerRecord::value).map(mapper);
    }
}